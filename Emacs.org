#+title Linas' Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Start emacs server

#+begin_src emacs-lisp

  (server-start)

#+end_src

* Package System Setup

#+begin_src emacs-lisp
  
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  (straight-use-package 'use-package)
  
  (setq straight-use-package-by-default t)
  
  (setq package-enable-at-startup nil)
  
#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp

  (defvar linas/default-font-size 120)
  (defvar linas/default-variable-font-size 120)
  (defvar linas/frame-transparency '(90 . 90))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)		; Disable visable scrollbar
  (tool-bar-mode -1)		; Disable the toolbar
  (tooltip-mode -1)		; Disable tooltips
  (set-fringe-mode 10)		; Give some breathing room

  (menu-bar-mode -1)		; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

** Set transperency

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha linas/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,linas/frame-transparency))

#+end_src

** Line numbers

#+begin_src emacs-lisp

  ;; Enabling line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable the line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  mu4e-main-mode-hook
                  mu4e-headers-mode-hook
                  proced-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

#+end_src

** Font Configuartion

*Prerequisites*
  - ~Font Code Retina~
  - ~Cantarell~

    Install on Void Linux by running:

#+begin_src sh

  sudo xbps-install cantarell-fonts font-firacode

#+end_src


#+begin_src emacs-lisp

  (defun linas/set-font-faces ()
    ;; Font
    ;;(set-face-attribute 'default nil :font "Jetbrains Mono" :height default-font-size)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height linas/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height linas/default-font-size)
    ;;(set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height default-font-size)
    :;(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height linas/default-variable-font-size :weight 'regular))

  ;; Not working for some reason
  ;; (if (deamonp)
  ;;     (add-hook 'after-make-frame-functions
  ;;               (lambda (frame)
  ;;                 (setq doom-modeline-icon t)
  ;;                 (with-selected-frame frame
  ;;                   (linas/set-font-faces))))
  ;;   (linas/set-font-faces))

  (linas/set-font-faces)

#+end_src

** Keybinding Configuration

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** General

#+begin_src emacs-lisp

  (use-package general
    :after evil
    :config
    (general-create-definer linas/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (linas/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(load-theme :which-key "choose theme")

     "o" '(:ignore t :which-key "open")
     "op" '(treemacs :which-key "Treemacs")

     ;; Open shell
     "os" '(:ignore t :which-key "shells")
     "ose" '(eshell :which-key "Eshell")

     "x" '(:ignore t :which-key "exwm")
     "xh" '(:ignore t :which-key "horizontal size")
     "xhk" '((lambda () (interactive) (exwm-layout-enlarge-window-horizontally 100)) :which-key "enlarge +100")
     "xhj" '((lambda () (interactive) (exwm-layout-shrink-window-horizontally 100)) :which-key "shrink +100")
     ))

#+end_src

*** Evil mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :custom
    (evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    (evil-collection-init))

#+end_src

** Bidirectinoal Editing

Emacs supports bidirectinal editing which means that scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering of horizontal text for display is from right to left. However, digits and Latin text embedded in these scripts are still displayed left to right.

Whilst this is a great feature, it adds to the amount of line scans Emacs has to for rendering text. So we are disabling it.

[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][Credits]]

#+begin_src emacs-lisp

  (setq-default bidi-paragraph-direction 'left-to-right)

  (if (version<= "27.1" emacs-version)
      (setq bidi-inhibit-bpa t))

#+end_src 

* Keep Folders Clean
** Backup Files

- Emacs.org~
#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

#+end_src

You can also turn off this behaviour entirely:
#+begin_src emacs-lisp

  ;;(setq make-backup-files nil)

#+end_src

** Auto Save Files

auto-save-mode will create temporary files in the same folder as edited files:
- #Emacs.org#

  You can change this using auto-save-file-name-transforms:
#+begin_src emacs-lisp

  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/"
                                                     user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves"
                                                                  user-emacs-directory) t)))

#+end_src

** Lock Files

These are the files that look like ~#Emacs.org~. They appear when you have unsaved changes to a file in a buffer!

Unfortunately these can't be moved, but they can be disabled:

#+begin_src emacs-lisp

  ;; (setq create-lockfiles nil)		

#+end_src

Not recommended setting this across the whole configuration but it can be useful in certain projects where these files cause trouble. Use directory-local variables for this!

** Littering

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;; (setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* UI Configuration
** Color Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t) 
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    (doom-themes-treemacs-theme "doom-atom")
    :config
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

#+end_src

** Doom Modeline

#+begin_src emacs-lisp
  
  (use-package all-the-icons
    :init
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install fonts t))
    :custom
    (all-the-icons-scale-factor 1))
  
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
  
#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :defer t
    :init (which-key-mode)
    :diminish which-key-mode

    ;; Setting to 300ms to hopefully decrease CPU usage
    :config
    (setq which-key-idle-delay 300))


#+end_src

** Minibuffer completion with Vertico

#+begin_src emacs-lisp

  (defun dw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a character backward"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
        (delete-backward-char arg)))

    (use-package vertico
      :bind (:map minibuffer-local-map
             ("C-j" . vertico-next)
             ("C-k" . vertico-previous)
             :map minibuffer-local-map
             ("<backspace>" . dw/minibuffer-backward-kill))
      :custom
      (vertico-cycle t)
      :init
      (vertico-mode))

#+end_src

*** Marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :bind(:map minibuffer-local-map
               ("M-A" . marginalia-cycle))
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init (marginalia-mode))

#+end_src

*** Orderless

#+begin_src emacs-lisp

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

#+end_src

** Consult

Just the example configuration provided in consult github page.

#+begin_src emacs-lisp

  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (
           ;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)

           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-M-j" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame

           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)

           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command

           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)

           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)

           ;; Isearch integration
           ("M-s e" . consult-isearch-history)

           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

#+end_src

** Precient

https://github.com/raxod502/prescient.el

*** Company Prescient

Prescient also has an extension for Company mode to provide sorting based on frequency:

#+begin_src emacs-lisp

  (use-package company-prescient
    :after company
    :custom
    ;; Do sort after length of the candidate
    (company-prescient-sort-length-enable t)
    :config
    (company-prescient-mode 1))

#+end_src

** Helpful

Helpful package for better help features.

#+begin_src emacs-lisp

  (use-package helpful
    :bind
    ("C-h f" . helpful-callable)
    ("C-h v" . helpful-variable)
    ("C-h k" . helpful-key)

    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    ("C-c C-d" . helpful-at-point)

    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    ("C-h F" . helpful-function)

    ;; By default, C-h C is bound to describe `describe-coding-system'. I
    ;; don't find this very useful, but it's frequently useful to only
    ;; look at interactive functions.
    ("C-h C" . helpful-command)
    :after vertico
    :commands (helpful-callable helpful-function helpful-variable helpful-at-point helpful-command helpful-key)
    :custom (helpful-max-buffers 1))

 #+end_src

** Hydra (Text Scaling)

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-decrease "out")
    ("k" text-scale-increase "in")
    ("l" nil "finished" :exit t))

  (linas/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Shackle

Enforce rules for popup windows.
Shacke gives you the means to put an end to popped up buffers not behaving the way you'd like them to.

#+begin_src emacs-lisp

  ;; (use-package shackle
  ;;   :custom
  ;;   (shackle-rules
  ;;    '((help-mode :noselect t)
  ;;      (helpful-mode :noselect t)
  ;;      (magit-mode :noselect t)
  ;;      ))
  ;;   (shackle-default-rule '(:same t))
  ;;   :config
  ;;   (shackle-mode 1))

#+end_src

** Undo Fu with session
*** [[https://github.com/emacsmirror/undo-fu][undo-fu]]

Simple, stable linear undo with redo.
Wrapper for Emacs built-in undo system, adding convenient undo/redo without losing access to the full undo history, allowing you to visit all previous states of the document if you need.

#+begin_src emacs-lisp

  (use-package undo-fu)

#+end_src

*** [[https://gitlab.com/ideasman42/emacs-undo-fu-session][undo-fu-session]]

Intended for use with undo-fu, as a way to save and restore undo sessions, even after restarting Emacs.

#+begin_src emacs-lisp

  (use-package undo-fu-session
    :custom
    (undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    :config
    (global-undo-fu-session-mode))

#+end_src

** Solaire-mode

Solaire-mode is an aesthetic plugin designed to visually distinguish "real" buffers (i.e. file-visiting code buffers where you do most of your work) from "unreal" buffers (like popups, sidebars, log buffers, terminals, etc) by giving the latter a slightly different -- often darker -- background

#+begin_src  emacs-lisp

  (use-package solaire-mode
    :config
    (solaire-global-mode +1))

#+end_src

* Async

For doing asynchronous processing in Emacs

#+begin_src emacs-lisp

  ;; (use-package async
  ;;   :custom
  ;;   ;; Compile all packages asynchronously
  ;;   (async-bytecomp-allowed-packages 'all)
  ;;   :config
  ;;   ;; This will allow you to run asynchronously the dired commands for copying, renaming and symlinking. If you are a helm user, this will allow you to copy, rename etc... asynchronously from helm. Note that with helm you can disable this by running the copy, rename etc... commands with a prefix argument.
  ;;   (dired-async-mode 1)
  ;;   ;; Compile packages asynchronously
  ;;   (async-bytecomp-package-mode 1))

#+end_src

* Org Mode
** *Prerequisites*
*** Latex preview in org mode

Run latex previews in org with  ~C-c C-x C-l~

- tex
  dvipng

  On void install by:

#+begin_src shell

  sudo xbps-install tex texlive-dvi

#+end_src

Also install: 

#+begin_src shell

  sudo xbps-install texlive-latexextra

#+end_src

To be able to convert .tex files into pdfs

** Org Mode Configuration
*** Mode setup

#+begin_src emacs-lisp

    (defun linas/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (visual-line-mode 1)
        (auto-fill-mode 0)) ; might need to remove the last

#+end_src

*** Font setup

#+begin_src emacs-lisp

    (defun linas/org-font-setup ()
        ;; Replace list hyphen with dot
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-level-7 . 1.1)
                        (org-level-8 . 1.1)))
          (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
        (setq evil-auto-indent nil)) ; might need to take out this later

#+end_src

*** Actual org setup

#+begin_src emacs-lisp

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . linas/org-mode-setup)
    :straight (:type built-in)
    :config
    (setq org-ellipsis " ▾") ; ... to the triangle thingy
  
    (setq org-pretty-entities t)
    (setq org-hide-emphasis-markers t)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
  
    (setq org-agenda-files '("~/org/Tasks.org"
                             "~/org/Mail.org"))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
  
    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))
  
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
  
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
  
            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))
  
            ("W" "Work Tasks" tags-todo "+work")
  
            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))
  
            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
  
    (linas/org-font-setup))
  
#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun linas/org-babel-tangle-config ()

   (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/Projects/super-emacs-config/"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'linas/org-babel-tangle-config)))

#+end_src

** Org Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Visual fill

#+begin_src emacs-lisp

  (defun linas/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . linas/org-mode-visual-fill))

#+end_src

** Structure Templates

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

* Org Roam
** Prerequisites

*Prerequisites*
- C/C++ compiler like ~gcc~ or ~clang~.

On Void Linux:

#+begin_src shell

  sudo xbps-install gcc

#+end_src

or:

#+begin_src shell

  sudo xbps-install clang

#+end_src

** Configuration

#+begin_src emacs-lisp

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("c" "chemistry" plain (file "~/RoamNotes/Templates/ChemestryStudyNotes.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
     :bind (("C-c n l" . org-roam-buffer-toggle)
            ("C-c n f" . org-roam-node-find)
            ("C-c n i" . org-roam-node-insert)
            :map org-mode-map
            ("C-M-i"    . completion-at-point))
     :config
     (org-roam-setup))

#+end_src

* File Management
** Dired
*** General

#+begin_src emacs-lisp

  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer))

#+end_src

*** Dired Single

#+begin_src emacs-lisp

  (use-package dired-single
    :commands (dired dired-jump))

#+end_src

*** Dired icons

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

*** Dired Open Files in External Programs

#+begin_src emacs-lisp

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

#+end_src

*** Toggle dot files

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs
    :commands treemacs
    :custom
    (treemacs-width 30))

#+end_src

*** Treemacs Compability with other Packages

#+begin_src emacs-lisp

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  ;; causes dired to display icons twice
  ;; (use-package treemacs-icons-dired
  ;;   :after dired
  ;;   :config
  ;;   (treemacs-icons-dired-mode)
  ;;   :custom
  ;;   (treemacs--icon-size 1))

  (use-package treemacs-magit
    :after (treemacs magit))

#+end_src

* Applications
** Pass

The standard unix password manager as gnu.org refers to it.

*** Requirements/Installation

*Prerequisites*
- pass

  On Void Linux:

#+begin_src sh

  sudo xbps-install pass

#+end_src

After installing pass run: (Where ~<gpg-id or email>~ is either gpg-id or your email. Read more on: [[https://wiki.archlinux.org/title/Pass][Arch Wiki Pass]]

#+begin_src sh

  pass init <gpg-id or email>

#+end_src shell

*** Firefox extension

Install Firefox extension on https://github.com/passff/

Continue setting https://github.com/passff/passff-host

On Void Linux you can:

#+begin_src shell

  sudo xbps-install passff-host

#+end_src

*** Setting auth source filename

So pass can find the encrypted password file

#+begin_src emacs-lisp

  (use-package auth-source
    :defer t
    :custom 
    (auth-source-pass-filename "~/.password-store/"))

#+end_src

*** The configuration

#+begin_src emacs-lisp

  (use-package pass)

#+end_src

* Loading Development.el

Loading development.el where packages related to development reside

#+begin_src emacs-lisp

  (if (file-exists-p "~/.emacs.d/development.el")
      (load-file "~/.emacs.d/development.el")
    (message "Development packages not loading. development.el file not found in the emacs directory"))

#+end_src

* Loading Shells.el

Loading development.el where packages related to development reside

#+begin_src emacs-lisp

  (if (file-exists-p "~/.emacs.d/shells.el")
      (load-file "~/.emacs.d/shells.el")
    (message "Shells packages not loading. shells.el file not found in the emacs directory"))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decresing the threshold
  (setq gc-cons-threshold (* 100 1000 1000))

#+end_src

