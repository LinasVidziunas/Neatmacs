#+title Linas' Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package System Setup

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ;("melpa-stable" . "https://stable.melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t) ;; Turn off later

#+end_src

** Auto Package Update

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp

  (defvar linas/default-font-size 120)
  (defvar linas/default-variable-font-size 120)
  (defvar linas/frame-transparency '(90 . 90))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)		; Disable visable scrollbar
  (tool-bar-mode -1)		; Disable the toolbar
  (tooltip-mode -1)		; Disable tooltips
  (set-fringe-mode 10)		; Give some breathing room

  (menu-bar-mode -1)		; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

** Set transperency
#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha linas/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,linas/frame-transparency))

#+end_src

** Line numbers
#+begin_src emacs-lisp

  ;; Enabling line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable the line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  mu4e-main-mode-hook
                  mu4e-headers-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

#+end_src

** Font Configuartion

*Prerequisites*
  - ~Font Code Retina~
  - ~Cantarell~

    Install on Void Linux by running:

#+begin_src emacs-lisp :tangle no

  sudo xbps-install cantarell-fonts font-firacode

#+end_src


#+begin_src emacs-lisp

  (defun linas/set-font-faces ()
    ;; Font
    ;;(set-face-attribute 'default nil :font "Jetbrains Mono" :height default-font-size)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height linas/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height linas/default-font-size)
    ;;(set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height default-font-size)
    :;(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height linas/default-variable-font-size :weight 'regular))

  ;; Not working for some reason
  ;; (if (deamonp)
  ;;     (add-hook 'after-make-frame-functions
  ;;               (lambda (frame)
  ;;                 (setq doom-modeline-icon t)
  ;;                 (with-selected-frame frame
  ;;                   (linas/set-font-faces))))
  ;;   (linas/set-font-faces))

  (linas/set-font-faces)

#+end_src

** Keybinding Configuration
#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** General
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer linas/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (linas/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")

     "o" '(:ignore t :which-key "open")
     "op" '(treemacs :which-key "Treemacs")

     ;; Open shell
     "os" '(:ignore t :which-key "shells")
     "ose" '(eshell :which-key "Eshell")

     "x" '(:ignore t :which-key "exwm")
     "xh" '(:ignore t :which-key "horizontal size")
     "xhk" '((lambda () (interactive) (exwm-layout-enlarge-window-horizontally 100)) :which-key "enlarge +100")
     "xhj" '((lambda () (interactive) (exwm-layout-shrink-window-horizontally 100)) :which-key "shrink +100")
     ))

#+end_src

*** Evil mode
#+begin_src emacs-lisp

  ;; Evil mode
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    ;(setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :init
    (evil-collection-init))

#+end_src

** Bidirectinoal Editing

Emacs supports bidirectinal editing which means that scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering of horizontal text for display is from right to left. However, digits and Latin text embedded in these scripts are still displayed left to right.

Whilst this is a great feature, it adds to the amount of line scans Emacs has to for rendering text. So we are disabling it.

[[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][Credits]]

#+begin_src emacs-lisp

  (setq-default bidi-paragraph-direction 'left-to-right)

  (if (version<= "27.1" emacs-version)
      (setq bidi-inhibit-bpa t))

#+end_src 

* Keep Folders Clean
** Backup Files

- Emacs.org~
#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

#+end_src

You can also turn off this behaviour entirely:
#+begin_src emacs-lisp

  ;;(setq make-backup-files nil)

#+end_src

** Auto Save Files

auto-save-mode will create temporary files in the same folder as edited files:
- #Emacs.org#

  You can change this using auto-save-file-name-transforms:
#+begin_src emacs-lisp

  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/"
                                                     user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves"
                                                                  user-emacs-directory) t)))

#+end_src

** Lock Files

These are the files that look like ~#Emacs.org~. They appear when you have unsaved changes to a file in a buffer!

Unfortunately these can't be moved, but they can be disabled:

#+begin_src emacs-lisp

  ;; (setq create-lockfiles nil)		

#+end_src

Not recommended setting this across the whole configuration but it can be useful in certain projects where these files cause trouble. Use directory-local variables for this!

** Littering
#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* UI Configuration
** Command Log Mode

#+begin_src emacs-lisp

  ;No use currently
  ;(use-package command-log-mode)

#+end_src

** Color Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t)) ;; Doom themes

#+end_src

** Doom Modeline

#+begin_src emacs-lisp

  (use-package all-the-icons
    :custom
    (all-the-icons-scale-factor 1))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :defer t
    :init (which-key-mode)
    :diminish which-key-mode

    ;; Setting to 300ms to hopefully decrease CPU usage
    :config
    (setq which-key-idle-delay 300))


#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1))

  ;; Might not need, just looking for icons tbh
  (use-package all-the-icons-ivy
   :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-M-j" . counsel-switch-buffer)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-pretty)
    :config
    (counsel-mode 1))


#+end_src

** Precient

https://github.com/raxod502/prescient.el

*** Ivy Prescient

Improcved Candidate Sorting with Precient
#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel ivy
    :custom
    ;; If below set to nil, then ivy-prescient.el does not apply prescient.el filtering to Ivy, but will still sort.
    (ivy-prescient-enable-filtering t)

    ;; Ivy prescient changes how the results are highlighted. To emulate old highlighting you can set this to true.
    (ivy-prescient-retain-classic-highlighting t)

    (prescient-filter-method '(literal regexp anchored))
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

*** Company Prescient

Prescient also has an extension for Company mode to provide sorting based on frequency:
#+begin_src emacs-lisp

  (use-package company-prescient
    :after company
    :custom
    ;; Do not sort after length of the candidate
    (company-prescient-sort-length-enable nil)
    :config
    (company-prescient-mode 1))

#+end_src

*** Helpful

Helpful package for better help features.
#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Hydra (Text Scaling)

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-decrease "out")
    ("k" text-scale-increase "in")
    ("l" nil "finished" :exit t))

  (linas/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Pretty mode

#+begin_src emacs-lisp

  (use-package pretty-mode
    :hook (prog-mode . pretty-mode) ;; For all programming modes
    :config
      (pretty-deactivate-groups
        '(:equality :ordering :ordering-double :ordering-triple
          :arrows :arrows-twoheaded :punctuation
          :logic :sets))

      (pretty-activate-groups
        '(:sub-and-superscripts :greek :arithmetic-nary)))

#+end_src

* Async

For doing asynchronous processing in Emacs

#+begin_src emacs-lisp

  (use-package async
    :ensure t
    :custom
    ;; Compile all packages asynchronously
    (async-bytecomp-allowed-packages 'all)
    :config
    ;; This will allow you to run asynchronously the dired commands for copying, renaming and symlinking. If you are a helm user, this will allow you to copy, rename etc... asynchronously from helm. Note that with helm you can disable this by running the copy, rename etc... commands with a prefix argument.
    (dired-async-mode 1)
    ;; Compile packages asynchronously
    (async-bytecomp-package-mode 1))

#+end_src

* Org Mode
** Org Mode Configuration
*** Mode setup

#+begin_src emacs-lisp

    (defun linas/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (visual-line-mode 1)
        (auto-fill-mode 0)) ; might need to remove the last

#+end_src

*** Font setup

#+begin_src emacs-lisp

    (defun linas/org-font-setup ()
        ;; Replace list hyphen with dot
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-level-7 . 1.1)
                        (org-level-8 . 1.1)))
          (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

        ;; Ensure that anything that should be fixed-pitch in Org files appears that way
        (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
        (setq evil-auto-indent nil)) ; might need to take out this later

#+end_src

*** Actual org setup

#+begin_src emacs-lisp
  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . linas/org-mode-setup)
    :config
    (setq org-ellipsis " ▾") ; ... to the triangle thingy

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files '("~/org/Tasks.org"
                             "~/org/Mail.org"))
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (linas/org-font-setup))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))
  
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
  ;  (setq org-confirm-babel-evaluate nil)


#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun linas/org-babel-tangle-config ()

   (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/Projects/super-emacs-config/"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'linas/org-babel-tangle-config)))

#+end_src

** Org Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Visual fill

#+begin_src emacs-lisp

  (defun linas/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . linas/org-mode-visual-fill))

#+end_src

** Structure Templates

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

* Org Roam
** Prerequisites

*Prerequisites*
- C/C++ compiler like ~gcc~ or ~clang~.

On Void Linux:

#+begin_src shell

  sudo xbps-install gcc

#+end_src

or:

#+begin_src shell

  sudo xbps-install clang

#+end_src

** Configuration

#+begin_src emacs-lisp
 
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("c" "chemistry" plain (file "~/RoamNotes/Templates/ChemestryStudyNotes.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
     :bind (("C-c n l" . org-roam-buffer-toggle)
            ("C-c n f" . org-roam-node-find)
            ("C-c n i" . org-roam-node-insert)
            :map org-mode-map
            ("C-M-i"    . completion-at-point))
     :config
     (org-roam-setup))

#+end_src

* Development
** Commenting

Very useful! Comment out with alt-/
#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
     :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Language Server

#+begin_src emacs-lisp
  (defun linas/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . linas/lsp-mode-setup)
    :init (setq lsp-keymap-prefix "C-c l") ; Or 'C-l', 's-l'
    :config (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom (lsp-ui-doc-position 'bottom ))

  (use-package lsp-treemacs
    :after lsp)

  (use-package lsp-ivy
    :after lsp)

#+end_src

** Debugging with dap-mode
# #+begin_src emacs-lisp

#   (use-package dap-mode
#     :commands dap-mode)

# #+end_src

** Languages
*** Emmet

#+begin_src emacs-lisp

    (use-package emmet-mode
      :hook
      (emmet-mode . sgml-mode-hook) ;; Auto-start on any markup modes
      (emmet-mode . css.mode-hook)) ;; enable Emmet's css abbreviation.

#+end_src

*** Python

#+begin_src emacs-lisp

  ;; Maybe change to pyri some other day
  (use-package python-mode
    :ensure t
    :mode "\\.py\\'"
    :hook (python-mode . lsp-deferred))

#+end_src

#+end_src

*** Typescript

#+begin_src emacs-lisp

  ;; (use-package typescript-mode
  ;;   :mode "\\.ts\\'"
  ;;   :hook (typescript-mode . lsp-deferred)
  ;;   :config
  ;;   (setq typescript-indent-level 2)
  ;;   (require 'dap-mode)
  ;;   (dap-node-setup))

#+end_src

*** Javascript

#+begin_src emacs-lisp

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook (javascript-mode . lsp-deferred))

#+end_src

*** Vue.js

#+begin_src emacs-lisp

  (use-package vue-mode
    :hook (vue-mode . lsp-deferred))

  (use-package vue-html-mode
    :hook (vue-html-mode . lsp-deferred))

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

Projectile is a project management library for Emacs which makes it a lot easier to naviage around code projects for various languages. Many packages integrate with projectile is it's a good idea to have it installed even if you don't use it's commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

  #+end_src
  
** Magit

A Git interface.

#+begin_src emacs-lisp

  (use-package magit
    ;; Might want to comment out custom later
    :commands magit-status
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)

#+end_src

** Rainbow delimiters

Colorizes nested parantheses.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)) ;; For all programming modes

#+end_src

* Terminals
** term-mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "zsh")
    (setq explicit-zsh-args '()))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** Eshell

#+begin_src emacs-lisp

  (defun linas/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size 2000           ;;Default 10000
          eshell-buffer-maximum-lines 2000           ;;Default 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  ;; Powerline makes it look cooler
  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . linas/configure-eshell)
    :config
      (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'powerline))

#+end_src

** vterm (disabled)

#+begin_src emacs-lisp

  ;; Not using anymore

  ;; (use-package vterm
  ;;   :commands vterm
  ;;   :config
  ;;   (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;   (setq vterm-shell "zsh")
  ;;   (setq vterm-max-scrollback 3000)) ;; Default 10000, set to 3000 in case of lag

#+end_src

** shell-mode (disabled)

#+begin_src emacs-lisp

  ;; (setq comint-output-filter-functions
  ;;       (remove 'ansi-color-process-output comint-output-filter-functions))

  ;; (add-hook 'shell-mode-hook
  ;;           (lambda ()
  ;;             ;; Disable font-locking in this buffer to improve performance
  ;;             (font-lock-mode -1)
  ;;             ;; Prevent font-locking from being re-enabled in this buffer
  ;;             (make-local-variable 'font-lock-function)
  ;;             (setq font-lock-function (lambda (_) nil))
  ;;             (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

#+end_src

* File Management
** Dired
*** General

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-up-directory
        "l" 'dired-find-file))

#+end_src

*** Dired Single

#+begin_src emacs-lisp

  (use-package dired-single
    :after dired)

#+end_src

*** Dired icons

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

*** Dired Open Files in External Programs

#+begin_src emacs-lisp

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

#+end_src

*** Toggle dot files

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs
    :commands treemacs)

#+end_src

*** Treemacs Compability with other Packages

#+begin_src emacs-lisp

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :after dired
    :config
    (treemacs-icons-dired-mode)
    :custom
    (treemacs--icon-size 1))

  (use-package treemacs-magit
    :after (treemacs magit))

#+end_src

* Applications
** Pass

The standard unix password manager as gnu.org refers to it.

*** Requirements/Installation

*Prerequisites*
- pass

  On Void Linux:

#+begin_src sh

  sudo xbps-install pass

#+end_src

After installing pass run: (Where ~<gpg-id or email>~ is either gpg-id or your email. Read more on: [[https://wiki.archlinux.org/title/Pass][Arch Wiki Pass]]

#+begin_src sh

  pass init <gpg-id or email>

#+end_src shell

*** Firefox extension

Install Firefox extension on https://github.com/passff/

Continue setting https://github.com/passff/passff-host

On Void Linux you can:

#+begin_src shell

  sudo xbps-install passff-host

#+end_src

*** Setting auth source filename

So pass can find the encrypted password file

#+begin_src emacs-lisp

  (use-package auth-source
    :defer t
    :custom 
    (auth-source-pass-filename "~/.password-store/"))

#+end_src

*** The configuration

#+begin_src emacs-lisp

  (use-package pass)

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decresing the threshold
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
