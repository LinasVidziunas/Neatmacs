#+title: Neatmacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Startup
** Garbage collection
Increate the GC threshold for faster startup. 

#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t; -*-

  ;; Increase the GC threshold for faster starup.
  (setq gc-cons-threshold (* 100 1000 1000))

#+end_src

** Prefer newest compiled .el files

#+begin_src emacs-lisp
  ;; Prefer newest compiled .el files
  (customize-set-variable 'load-prefer-newer noninteractive)
#+end_src

** Native compilation settings

#+begin_src emacs-lisp
  (when (featurep 'native-compile)
    ;; Silence compiler warnings
    (setq native-comp-async-report-warnings-errors nil)

    ;; Make native compilation happen asynchronously
    (setq native-comp-deferred-compilation t)

    ;; Set the right directory to store the native compilation cache
    ;; Note the method for setting the eln-cache directory depends on the emacs version
    (when (fboundp 'startup-redirect-eln-cache)
      (if (version< emacs-version "29")
          (add-to-list 'native-comp-eln-load-path (convert-standard-filename (expand-file-name "var/eln-cache/" user-emacs-directory)))
        (startup-redirect-eln-cache (convert-standard-filename (expand-file-name "var/eln-cache/" user-emacs-directory)))))
    (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

** Load darker theme

Load a darker theme to avoid getting blinded on emacs startup.

#+begin_src emacs-lisp
  (load-theme 'deeper-blue t)
#+end_src

** Initial buffer to be fundamental mode

Should load the initial buffer faster.

#+begin_src emacs-lisp
  (customize-set-variable 'initial-major-mode 'fundamental-mode)
#+end_src

** Profile startup time
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Neatmacs loaded in %s."
                       (emacs-init-time))))
#+end_src

** Coding sytem
#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
#+end_src

** Large files

#+begin_src emacs-lisp
  (customize-set-variable 'large-file-warning-threshold (* 100 1000 1000))
#+end_src

* Start emacs server

#+begin_src emacs-lisp

  (server-start)

#+end_src

* Group

#+begin_src emacs-lisp
  (defgroup neatmacs '()
    "A Neat Emacs Configuration"
    :tag "Neatmacs"
    :group 'emacs)
#+end_src

* Package System Setup

#+begin_src emacs-lisp
  
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  (straight-use-package 'use-package)
  
  (setq straight-use-package-by-default t)
  
  (setq package-enable-at-startup nil)
  
#+end_src

* Load config.el

#+begin_src emacs-lisp
  (when (file-exists-p (expand-file-name "config.el" user-emacs-directory))
    (load (expand-file-name "config.el" user-emacs-directory) nil 'nomessage))
#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp

  (defvar neatmacs/default-font-size 100)
  (defvar neatmacs/default-variable-font-size 100)
  (defvar neatmacs/frame-transparency '(99 . 100))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)		; Disable visable scrollbar
  (tool-bar-mode -1)		; Disable the toolbar
  (tooltip-mode -1)		; Disable tooltips
  (set-fringe-mode 10)		; Give some breathing room

  (menu-bar-mode -1)		; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

** Set transperency

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha neatmacs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,neatmacs/frame-transparency))

#+end_src

** Line numbers

#+begin_src emacs-lisp

  ;; Enabling line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable the line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  mu4e-main-mode-hook
                  mu4e-headers-mode-hook
                  proced-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

#+end_src

** Font Configuartion

*Prerequisites*
  - ~Font Code Retina~
  - ~Cantarell~
  - ~Jetbrains Mono~

    
#+begin_src emacs-lisp

  (defun neatmacs/set-font-faces ()
    ;; Font
    (set-face-attribute 'default nil :font "Jetbrains Mono" :height neatmacs/default-font-size)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height neatmacs/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height neatmacs/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height neatmacs/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height neatmacs/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height neatmacs/default-variable-font-size :weight 'regular))

  ;; Not working for some reason
  ;; (if (deamonp)
  ;;     (add-hook 'after-make-frame-functions
  ;;               (lambda (frame)
  ;;                 (setq doom-modeline-icon t)
  ;;                 (with-selected-frame frame
  ;;                   (linas/set-font-faces))))
  ;;   (linas/set-font-faces))

  (neatmacs/set-font-faces)

#+end_src

** Keybinding Configuration

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** General

#+begin_src emacs-lisp

  (use-package general
    :after evil
    :config
    (general-create-definer linas/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (linas/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(load-theme :which-key "choose theme")

     "o" '(:ignore t :which-key "open")
     "op" '(treemacs :which-key "Treemacs")

     ;; Open shell
     "os" '(:ignore t :which-key "shells")
     "ose" '(eshell :which-key "Eshell")

     "x" '(:ignore t :which-key "exwm")
     "xh" '(:ignore t :which-key "horizontal size")
     "xhk" '((lambda () (interactive) (exwm-layout-enlarge-window-horizontally 100)) :which-key "enlarge +100")
     "xhj" '((lambda () (interactive) (exwm-layout-shrink-window-horizontally 100)) :which-key "shrink +100")
     ))

#+end_src

* UI Configuration
** Consult
*** Consult

Just the example configuration provided in consult github page.

#+begin_src emacs-lisp

  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (
           ;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)

           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-M-j" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame

           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)

           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command

           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)

           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)

           ;; Isearch integration
           ("M-s e" . consult-isearch-history)

           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

#+end_src

*** Consult integration with LSP

#+begin_src emacs-lisp

  (use-package consult-lsp
    :after consult lsp)

#+end_src

*** Consult integration with projectile

#+begin_src emacs-lisp

  (use-package consult-projectile
    :straight (consult-projectile
               :type git
               :host gitlab
               :repo "OlMon/consult-projectile"
               :branch "master"))

#+end_src

** Embark

#+begin_src emacs-lisp

  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-act)
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Precient

https://github.com/raxod502/prescient.el

*** Company Prescient

Prescient also has an extension for Company mode to provide sorting based on frequency:

#+begin_src emacs-lisp

  (use-package company-prescient
    :after company
    :custom
    ;; Do sort after length of the candidate
    (company-prescient-sort-length-enable t)
    :config
    (company-prescient-mode 1))

#+end_src

** Hydra (Text Scaling)

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-decrease "out")
    ("k" text-scale-increase "in")
    ("l" nil "finished" :exit t))

  (linas/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Undo Fu with session

*** [[https://github.com/emacsmirror/undo-fu][undo-fu]]

Simple, stable linear undo with redo.
Wrapper for Emacs built-in undo system, adding convenient undo/redo without losing access to the full undo history, allowing you to visit all previous states of the document if you need.

#+begin_src emacs-lisp

  (use-package undo-fu)

#+end_src

*** [[https://gitlab.com/ideasman42/emacs-undo-fu-session][undo-fu-session]]

Intended for use with undo-fu, as a way to save and restore undo sessions, even after restarting Emacs.

#+begin_src emacs-lisp

  (use-package undo-fu-session
    :custom
    (undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    :config
    (global-undo-fu-session-mode))

#+end_src

* Org
** *Prerequisites*
*** Latex preview in org mode

Run latex previews in org with  ~C-c C-x C-l~

- tex
- dvipng

  On void install by:

#+begin_src shell

  sudo xbps-install tex texlive-dvi

#+end_src

Also install: 

#+begin_src shell

  sudo xbps-install texlive-latexextra

#+end_src

To be able to convert .tex files into pdfs

** Org Mode Configuration
*** Mode setup

#+begin_src emacs-lisp

  (defun linas/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (auto-fill-mode 0)) ; might need to remove the last

#+end_src

*** Font setup

#+begin_src emacs-lisp

  (defun linas/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1))))
    ;;(set-face-attribute (car face) nil :font "Cantarell" :weight 'normal :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (setq evil-auto-indent nil)) ; might need to take out this later

#+end_src

*** Actual org setup

#+begin_src emacs-lisp

  (use-package org
    :straight (:type built-in)
    :commands (org-capture org-agenda)
    :hook (org-mode . linas/org-mode-setup)
    :custom
    (org-file-tags t)
    :config
    (setq org-ellipsis " ▾") ; ... to the triangle thingy

    (setq org-pretty-entities t)
    (setq org-hide-emphasis-markers t)
    (setq org-html-validation-link nil)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.3))

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files '("~/org/Tasks.org"
                             "~/org/Birthdays.org"
                             "~/org/School.org"
                             "~/org/Work.org"
                             "~/org/Mail.org"))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
            ("Project")
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("@school" . ?S)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))
    (linas/org-font-setup))

#+end_src

** Org Modern

#+begin_src emacs-lisp

  (use-package org-modern
    :after org
    :config
    (global-org-modern-mode))

#+end_src

** Export
*** LaTeX

#+begin_src emacs-lisp

  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[11pt, a4paper]{article}

  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{fixltx2e}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{rotating}
  \\usepackage[normalem]{ulem}
  \\usepackage{amsmath}
  \\usepackage{textcomp}
  \\usepackage{marvosym}
  \\usepackage{wasysym}
  \\usepackage{amssymb}
  \\usepackage{hyperref}
  \\usepackage{mathpazo}
  \\usepackage{color}
  \\usepackage{enumerate}
  \\definecolor{bg}{rgb}{0.95,0.95,0.95}
  \\tolerance=1000

  \\usepackage{listings}
  \\usepackage{color}
  \\usepackage{fancyvrb}
  \\usepackage[margin=0.5in]{geometry}

  \\definecolor{deepblue}{rgb}{0,0,0.5}
  \\definecolor{linasyellow}{rgb}{1,1,0.7}
  \\definecolor{deepred}{rgb}{0.6,0,0}
  \\definecolor{deepgreen}{rgb}{0,0.5,0}

  \\DeclareFixedFont{\\ttb}{T1}{txtt}{bx}{n}{12} % for bold
  \\DeclareFixedFont{\\ttm}{T1}{txtt}{m}{n}{12}  % for normal

  \\linespread{1.1}
  \\hypersetup{pdfborder=0 0 0}"

                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")))

  ;; Use listing for source code blocks
  (setq org-latex-listings t)

  (setq org-latex-listings-options
        '(("basicstyle" "\\ttfamily")
          ("breakatwhitespace" "false")
          ("breakautoindent" "true")
          ("breaklines" "true")
          ("columns" "[c]fullflexible")
          ("commentstyle" "")
          ("emptylines" "*")
          ("extendedchars" "false")
          ("fancyvrb" "true")
          ("firstnumber" "auto")
          ("flexiblecolumns" "false")
          ("frame" "single")
          ("frameround" "tttt")
          ("identifierstyle" "")
          ("keepspaces" "true")
          ("keywordstyle" "")
          ("mathescape" "false")
          ("numbers" "left")
          ("numbersep" "5pt")
          ("numberstyle" "\\tiny")
          ("resetmargins" "false")
          ("showspaces" "false")
          ("showtabs" "true")
          ("stepnumber" "2")
          ("stringstyle" "")
          ("tab" "↹")
          ("tabsize" "4")
          ("texcl" "false")
          ("upquote" "false")))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun linas/org-babel-tangle-config ()

   (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name "~/Projects/Neatmacs/"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'linas/org-babel-tangle-config)))

#+end_src

** Org Bullets

#+begin_src emacs-lisp

  ;; (use-package org-bullets
    ;; :hook (org-mode . org-bullets-mode)
    ;; :custom
    ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Visual fill

#+begin_src emacs-lisp

  (defun linas/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . linas/org-mode-visual-fill))

#+end_src

** Structure Templates

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Org Roam
*** Prerequisites

*Prerequisites*
- C/C++ compiler like ~gcc~ or ~clang~.

On Void Linux:

#+begin_src shell

  sudo xbps-install gcc

#+end_src

or:

#+begin_src shell

  sudo xbps-install clang

#+end_src

*** Configuration

#+begin_src emacs-lisp

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-node-display-template
     (concat "${type:10} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M>-${slug}.org" "#+title: ${title}\n")
        :immediate-finish t
        :unnarrowed t)
       ("s" "school" plain
        "%?"
        :if-new (file+head "School/%<%Y%m%d%H%M>-${slug}.org" "#+title: ${title}\n")
        :immediate-finish t
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of node"
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))
    (org-roam-setup))

#+end_src

* File types
** Reading CSV in eamcs

#+begin_src emacs-lisp

  (use-package csv-mode
    :mode "\\.csv\\'"
    :hook
    (csv-mode . (lambda ()
                   (csv-align-mode t)
                   (toggle-truncate-lines 1)
                   (csv-header-line t))))

#+end_src

* Tramp configuration

#+begin_src emacs-lisp

  (use-package tramp
    :straight (:type built-in)
    :custom (tramp-default-method "ssh"))

#+end_src

* Loading Development.el

Loading development.el where packages related to development reside

#+begin_src emacs-lisp

  (if (file-exists-p "~/.emacs.d/development.el")
      (load-file "~/.emacs.d/development.el")
    (message "Development packages not loading. development.el file not found in the emacs directory"))

#+end_src

* Loading Shells.el

Loading development.el where packages related to development reside

#+begin_src emacs-lisp

  (if (file-exists-p "~/.emacs.d/shells.el")
      (load-file "~/.emacs.d/shells.el")
    (message "Shells packages not loading. shells.el file not found in the emacs directory"))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decresing the threshold
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
